/** * Extracts URLs from a string based on common patterns (http(s)://, ftp://, www.). * Returns an array of unique URLs in the order they first appear. * * @param {string} inputString The string to extract URLs from. * @returns {string[]} An array of unique URL strings. Returns an empty array if the input is not a string or no URLs are found. * @example * extractUrlsFromString("Visit our website at https://www.example.com or ftp://ftp.test.org. Also check www.anothersite.net."); // returns ["https://www.example.com", "ftp://ftp.test.org", "www.anothersite.net"] * @example * extractUrlsFromString("No urls here."); // returns [] * @example * extractUrlsFromString(123); // returns [] */function extractUrlsFromString(inputString){  // Input validation: Check if inputString is a string.  if (typeof inputString !== 'string') {    return []; // Return empty array if not a string.  }  // Regular expression for common URL patterns: http://, https://, ftp://, and www.  // This regex looks for these prefixes followed by non-whitespace characters.  const urlRegex = /(https?|ftp):\/\/[^\s]+|www\.[^\s]+/g;  // Find all matches in the input string.  const matches = inputString.match(urlRegex);  // If no matches are found or the input string is empty after validation, return an empty array.  if (!matches) {    return [];  }  // Use a Set to keep track of unique URLs encountered so far.  const uniqueUrls = new Set();  // Use an array to store the unique URLs in the order they are first encountered.  const resultUrls = [];  // Iterate through the found matches.  for (const url of matches) {    // Check if the URL has already been added to the result.    if (!uniqueUrls.has(url)) {      // If not, add it to the Set and the result array.      uniqueUrls.add(url);      resultUrls.push(url);    }  }  // Return the array of unique URLs in order of first appearance.  return resultUrls;}